openapi: 3.0.0
info:
  title: Market Data API
  version: 'v3'
  x-logo:
    url: 'https://docs.bravenewcoin.com/images/logo.png'
    altText: 'Brave New Coin'
  contact:
    name: Brave New Coin
    url: 'https://bravenewcoin.com/'
    email: support@bravenewcoin.com
servers:
  - url: 'https://api.bravenewcoin.com/{basePath}'
    description: Production API Server
    variables:
      basePath:
        default: v3
components:
  securitySchemes:
    auth:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://api.bravenewcoin.com/v3/oauth/token'
          scopes:
            read:asset: Read available assets
            read:market: Read available markets
            read:exchange: Read available exchanges
            read:exchange-ticker: Read exchange ticker
            read:index-ticker: Read index ticker
            read:ohlcv: Read end of day open, high, low, close and volume
            read:market-cap: Read the market capatilization
  schemas:
    Error:
      type: object
      properties:
        status:
          description: The status of the error.
          type: string
        timestamp:
          description: The timestamp of the error.
          type: string
          format: date-time
        message:
          description: description of error.
          type: string
        errors:
          description: A list of errors.
          type: array
          items:
            type: object
            properties:
              object:
                description: The object that caused the error.
                type: string
              field:
                description: The field that caused the error.
                type: string
              rejectedValue:
                description: The value which caused the error.
                type: string
              message:
                description: A message which usually provides a hint on how to resolve the error.
                type: string
    Asset:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        name:
          description: The friendly name of the asset.
          type: string
        symbol:
          description: The ticker symbol of the asset.
          type: string
        status:
          description: The status of the asset.
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        type:
          description: Indicator for the type of the asset.
          type: string
          enum:
            - FIAT
            - CRYPTO
        url:
          description: The url of where information about the asset can be found.
          type: string
    Market:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        baseAssetId:
          description: The base asset id which makes up the market
          type: string
          format: uuid
        quoteAssetId:
          description: The quote asset id which makes up the market
          type: string
          format: uuid
    Exchange:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        name:
          description: The name of the exchange
          type: string
        url:
          description: The URL of the exchange
          type: string
        status:
          description: The status of the exchange
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - MAINTENANCE
        markets:
          description: The markets available on the exchange
          type: array
          items:
            type: object
            properties:
              marketId:
                description: The market id
                type: string
                format: uuid
              marketStatus:
                description: The status of the market on the exchange
                type: string
                enum:
                  - ACTIVE
                  - INACTIVE
              qualified:
                description: Indicates if the market on the exchange contributes to the BNC indices
                type: string
                enum:
                  - YES
                  - NO
    Tick:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        exchangeId:
          description: Unique identifier for the exchange.
          type: string
          format: uuid
        marketId:
          description: Unique identifier for the market.
          type: string
          format: uuid
        last:
          description: The last traded price at the timestamp in the quote asset.
          type: string
        volume:
          description: The volume of the base asset in the last 24 hours.
          type: string
        bid:
          description: 'The bid price in the quote asset.'
          type: string
        ask:
          description: 'The ask price in the quote asset.'
          type: string
        timestamp:
          description: The timestamp from when the market data was collected from the exchange.
          type: string
          format: date-time
    IndexTicker:
      type: object
      properties:
        indexId:
          description: Unique identifier for the constituent used to calculate the index.
          type: string
          format: uuid
        indexType:
          description: The type of the index
          type: string
          enum:
            - MWA
            - GWA
        price:
          description: The calculated price.
          type: string
        timestamp:
          description: The timestamp the marketed weighted average was calculated.
          type: string
          format: date-time
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        volume:
          description: The calculated volume in the last 24 hours.
          type: string
    OpenHighLowCloseVolume:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        indexId:
          description: Unique identifier for the constituent used to calculate the index.
          type: string
          format: uuid
        indexType:
          description: The index type of thhe OHLCV
          required: true
          type: string
          enum:
            - MWA
            - GWA
        timestamp:
          description: Start of the period for which OHLCV belongs to in UTC
          type: string
          format: date-time
        open:
          description: The opening price of the index for the 24h period
          type: string
        close:
          description: The closing price of the index for the 24h period
          type: string
        high:
          description: The high price of the index for the 24h period
          type: string
        low:
          description: The low price of the index for the 24h period
          type: string
        volume:
          description: The 24h volume
          type: string
        volumeUsd:
          description: The 24h volume in USD
          type: string
        vwap:
          description: The 24h volume-weighted average price of the index
          type: string
        twap:
          description: The 24h time-weighted average price of the index
          type: string
    MarketCapPercentChange:
      type: object
      description: The percent change over a period of time.
      properties:
        change24h:
          description: Percentage change for the 24 hour period.
          type: string
        change7d:
          description: Percentage change for the 7 day period.
          type: string
        change30d:
          description: Percentage change for the 30 day period.
          type: string
    MarketCap:
      type: object
      properties:
        id:
          description: Unique identifier for the resource.
          type: string
          format: uuid
        assetId:
          description: The asset id
          type: string
          format: uuid
        timestamp:
          description: The timestamp the market capitalisation was calculated.
          type: string
          format: date-time
        marketCapRank:
          description: The market cap ranking order.
          type: string
        volumeRank:
          description: The 24hr volume ranking order.
          type: string
        price:
          description: The global weighted average price of the asset in USD.
          type: string
        volume:
          description: The total global weighted average 24h volume of the asset.
          type: string
        totalSupply:
          description: The total supply of the asset.
          type: string
        freeFloatSupply:
          description: The circulating supply of the asset. It is the total supply less any supply that has been removed from circulation.
          type: string
        marketCap:
          description: Market cap in USD based on the price and the free float supply.
          type: string
        totalMarketCap:
          description: USD market cap figure based on total supply.
          type: string
        marketCapChange:
          $ref: '#/components/schemas/MarketCapPercentChange'
        totalMarketCapChange:
          $ref: '#/components/schemas/MarketCapPercentChange'
        volumeChange:
          $ref: '#/components/schemas/MarketCapPercentChange'
        priceChange:
          $ref: '#/components/schemas/MarketCapPercentChange'
  parameters:
    idParam:
      name: id
      in: path
      required: true
      description: The unique resource identifier
      schema:
        type: string
        format: uuid
  responses:
    Error:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
x-tagGroups:
  - name: General
    tags:
      - Overview
      - Authentication
      - Pagination
      - Timezones
      - Versioning
  - name: Websocket API
    tags:
      - Websocket Overview
      - Websocket Errors
      - Websocket Exchange Ticker
  - name: Beta Websocket API
    tags:
      - Websocket Index Ticker
  - name: Rest API
    tags:
      - Rest API Errors
      - Asset
      - Market
      - Exchange
      - Exchange Ticker
  - name: Beta Rest API
    tags:
      - Index Ticker
      - Open, High, Low, Close, Volumes
      - Market Cap
      - Taxonomy
tags:
  - name: Authentication
    description: |
      We use OAuth2 flows for security.

      ## Websocket API Authentication

      Our websocket endpoint requires the bearer token to be sent as *access_token* parameter in the connection url. The token will have to be used within 30 seconds of being issued.

      ```
      wss://ws.bravenewcoin.com?access_token=<token>
      ```

      ## Rest API Authentication

      Our REST endpoints require a valid bearer token to be sent in the Authorization header.
      ```
      Authorization: Bearer <token>
      ```
      <!-- ReDoc-Inject: <security-definitions> -->
  - name: Overview
    description: |
      Brave New Coin has been tracking crypto asset ticker data from the worlds major exchanges since April 2014. We now provide data from ~250 exchanges.

      The Brave New Coin github organisation has example API clients for your usage:
      * [Java](https://github.com/bnc-projects/java-api-client)
      * [JavaScript](https://github.com/bnc-projects/bnc-websocket-client-sample)

      If the language which you are working in isn't found in our list, then feel free to download the OpenAPI specification and generate your own clients in the language of your choice. The download link can be found at the top of this page; and is available on [github](https://github.com/bnc-projects/web-api).

      If you find any errors with our documentation, feel free to create issues and/or pull requests on [github](https://github.com/bnc-projects/web-api).

      ### Usage of our APIs
      We recommend using UUIDs to access data from this API. The following resources are our informational API that can be queried to provide UUIDs:
      * [Asset](#tag/Asset)
      * [Market](#tag/Market)
      * [Exchange](#tag/Exchange)

  - name: Websocket Overview
    description: |
      Brave New Coin Websocket API exposes exchange ticker data via Websockets. Clients need to send subscribe message to start recieving data. See [Exchange Ticker](#tag/Websocket-Exchange-Ticker).

      A sample project using the BNC Websocket API is available on Github :

      * [Node.js](https://github.com/bnc-projects/bnc-websocket-client-sample)

      ### Connection URL

      `wss://ws.bravenewcoin.com?access_token=<token>`

      ### Authentication

      All websocket connections require authentication. For more information see -

      * [Authentication](#tag/Authentication)

      ### Common Message Types

      Websocket messages have an `event` field to identify them

      #### Connection Message

      Once the client connection is successful, the server will send back a connection message
      ```
      {
        "event" : "CONNECTED",
        "timestamp" : "2018-09-05T01:34:39Z"
      }
      ```

      #### Ping message

      Clients or server can send a ping request to check if the connection is active. Clients are expected to implement a `pong` response. The server may terminate the connection if the client does not respond to `ping` from the server.

      Request
      ```
      {
        "event": "PING"
      }
      ```
      Response
      ```
      {
        "event": "PONG",
        "timestamp": "2018-09-05T01:34:39Z"
      }
      ```
  - name: Websocket Errors
    description: |
      Server will return an error message in the below format
      ```
      {
        "event": "ERROR",
        "code": "400",
        "message": "Invalid event type provided",
        "timestamp": "2018-09-05T01:34:39Z"
      }
      ```
      ### Error code summary

      Error Code                         | Description
      -----------------------------------|------------
      400 - Bad Request                  | The request was unacceptable, often due to missing a required parameter.
      401 - Unauthorized                 | No valid OAuth2 token provided
      403 - Forbidden                    | Not authorized to access this resource
      (please contact sales about adding access to your profile).
      404 - Not Found                    | Requested resource not found(typically the marketId or exchangeId passed through the subscription request not found)

      There may be other types of errors that may be returned and we recommend handling the ERROR type gracefully.
  - name: Websocket Exchange Ticker
    description: |

      This endpoint can be used to subscribe to the raw ticker data from different exchanges. Clients can send a Subscribe message to start receiving.



      To subscribe to all the ticks of an exchange only the exchangeId can be sent. To subscribe to all the ticks of an market only the marketId or marketName can be sent. Both exchangeId and marketId can be sent to subscribe to the market in an exchange. Clients can subscribe to multiple sources as required. Clients need to call the [Market](#tag/Market) and [Exchange](#tag/Exchange) REST API's to get the ids.

      ### Parameters

      Name                      | Description
      --------------------------|------------
      marketId                  | Subscribe to the exchange ticks for this market
      exchangId                 | Subscribe to the exchange ticks for this exchange
      marketName                | Subscribe to the exchange ticks for this exchange by the trade pair. e.g. BTC_USD. It is recommended to subscribe by the marketId rather than the marketName

      #### Subscribe to Exchange

      ```
      {
        "event": "SUBSCRIBE_EXCHANGE_TICKER",
        "exchangeId": "359107d3-bd1a-418c-9470-58831ed9a45e"
      }
      ```

      #### Subscribe to Market by Id

      ```
      {
        "event": "SUBSCRIBE_EXCHANGE_TICKER",
        "marketId": "359107d3-bd1a-418c-9470-58831ed9a45e"
      }
      ```
      #### Subscribe to Market by Name

      ```
      {
        "event": "SUBSCRIBE_EXCHANGE_TICKER",
        "marketName": "BTC_USD"
      }
      ```
      #### Subscribe to a Market in an Exchange

      ```
      {
        "event": "SUBSCRIBE_EXCHANGE_TICKER",
        "exchangeId": "359107d3-bd1a-418c-9470-58831ed9a45e"
        "marketId": "f7cbc588-283e-41da-9c28-eee2113d7b8d"
      }
      ```
      #### Response

      The server will return ticks in this format
      ```
      {
        "event": "EXCHANGE_TICKER"
        "id": "string",
        "exchangeId": "string",
        "marketId": "string",
        "last": "string",
        "volume": "string",
        "bid": "string",
        "ask": "string",
        "timestamp": "2018-09-06T04:35:44Z"
      }
      ```
    x-traitTag: true
  - name: Websocket Index Ticker
    description: |

      This endpoint can be used to subscribe to the index ticker data. These indices are calculated by BNC and published to the websocket endpoint. Clients need to send a Subscribe message to start receiving.
      Indices can be subscribed by the indexId or the indexType.

      The index id will differ based on the index type.

      | Index Type | Index Id  |
      | -----------|:---------:|
      | MWA        |Market Id  |
      | GWA        |Asset Id   |

      Clients need to call the [Market](#tag/Market) and [Asset](#tag/Asset) REST API's to get the ids.

      #### Subscribe by Index ID

      ```
      {
        "event": "SUBSCRIBE_INDEX_TICKER",
        "indexId": "359107d3-bd1a-418c-9470-58831ed9a45e"
      }
      ```

      #### Subscribe by Index Type

      ```
      {
        "event": "SUBSCRIBE_INDEX_TICKER",
        "indexType": "MWA"
      }
      ```

      #### Response

      The server will return ticks in this format
      ```
      {
        "event": "INDEX_TICKER"
        "id": "string",
        "indexId": "string",
        "indexType": "string",
        "price": "string",
        "volume": "string",
        "timestamp": "2018-09-06T04:35:44Z"
      }
      ```
    x-traitTag: true
  - name: Rest API Errors
    description: |
      Brave New Coin uses conventional HTTP response codes to indicate the success or failure of an API request. In general: Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error that failed given the information provided (e.g. A  required parameter was missing). Codes in the `5xx` range indicate an error with Brave New Coin's servers.

      Some `4xx` errors that could be handled programmatically include an error code that briefly explains the error reported.
      ```
      {
        "status": "BAD_REQUEST",
        "timestamp": "2018-08-14T21:55:46.055Z",
        "message": "validation error",
        "errors": [
          {
            "object": "Asset",
            "field": "status",
            "rejectedValue": "ERROR",
            "message": "Invalid value provided for status"
          }
        ]
      }
      ```

      ### HTTP status code summary
      HTTP Code                          | Description
      -----------------------------------|------------
      200 - OK                           | Everything worked as expected
      400 - Bad Request                  | The request was unacceptable, often due to missing a required parameter.
      401 - Unauthorized                 | No valid OAuth2 token provided
      404 - Not Found                    | The requested resource doesn't exist
      409 - Conflict                     | The request conflicts with another request (perhaps due the resource was updated)
      429 - Too Many Requests            | Too many requests hit the API too quickly. We recommend an expontential backoff of your requests.
      500, 502, 503, 504 - Server Errors | Something went wrong on Brave New Coin's end. (These will be rare).

      ### Handling Errors
      Our API libraries raise exceptions for many reasons, such as invalid parameters, authentication errors, and network unavailability. We recommend writing code that gracefully handles all possible API exceptions.
    x-traitTag: true
  - name: Pagination
    description: |
      All top-level API resources have support for bulk fetches via "list" API methods. For instance, you can list assets, list exchange tickers, and list index tickers. These list API methods share a common structure, taking at least these three parameters: `size`, `timestamp` or `startAfter`.

      Brave New Coin API's utilise cursor-based pagination using the `startAfter` parameter. The parameter should be an existing object ID and returns resources in reverse chronological order. The `startAfter` parameter returns resources listed after the named resource. For APIs which take both a `startAfter` and `timestamp` parameters, the `timestamp` is ignored if `startAfter` is provided.

      Arguments     |                         | Description
      --------------|-------------------------|------------
      size          | Optional, default is 10 | The number of resources to be returned, between 1 and 2000.
      startAfter    |                         | A cursor for use in pagination. startAfter is an resource ID that defines your place in the list.
      timestamp     |                         | The timestamp to start searching from going backwards in time.

      List Response Format | Description
      ---------------------|------------
      content              | An array containing the actual response elements, paginated by any request parameters.
      nextId               | The value to be provided in the `startAfter` to get the next page.

  - name: Timezones
    description: |
      Brave New Coin APIs will return datetime values in ISO8601 format. Datetime values are always returned in UTC time (as indicated by the `Z` at the end of the datetime value).

      Currently Brave New Coin APIs only accept datetimes in query parameters and request bodies which are in UTC.
  - name: Versioning
    description: |
      When we make backwards-incompatible changes to the API, we will release a new version. The current version is **v3**, for more information regarding changes see the [API changelog](#tag/Versioning)

      The following changes are considered backwards-compatible:
        * Adding new API resources
        * Adding new optional request parameters to existing API methods
        * Adding new properties to existing API responses
        * Changing the order of properties in existing API responses
        * Changing the length or format of object IDs or other opaque strings
    x-traitTag: true
  - name: Asset
    description: Retrieve information about assets.
  - name: Market
    description: Retrieve information about markets.
  - name: Exchange
    description: Retrieve information about exchanges.
  - name: Exchange Ticker
    description: Retrieve the exchange ticker information.
  - name: Market Weighted Averages
    description: Retrieve the market weighted averages.
  - name: Global Weighted Averages
    description: Retrieve the global weighted averages.
  - name: Open, High, Low, Close, Volumes
    description: Retrieve the open high low close volumes.
  - name: Market Capitalisation
    description: Retrieve the market capitalisation.
  - name: Rates
    description: Retrieve the exchange rates between assets.
paths:
  /oauth/token:
    post:
      tags:
        - Authentication
      summary: Client Credentials
      description: |
        This is the OAuth 2.0 grant that server processes utilize in order to access an API.
        Use this endpoint to directly request an Access Token by using the Client Credentials (a Client ID and a Client Secret).

        The BNC authentication endpoint is https://api.bravenewcoin.com/v3/oauth/token
      operationId: clientCredentials
      x-code-samples:
        - lang: Shell
          label: curl
          source: |
            curl -X POST https://api.bravenewcoin.com/v3/oauth/token -H 'Content-Type: application/json' -d '
            {
              "grant_type": "client_credentials",
              "client_id": "your client id",
              "client_secret": "your client secret",
              "audience": "https://api.bravenewcoin.com"
            }'
        - lang: JavaScript
          label: Node
          source: |
            var request = require("request");

            var options = {
              method: 'POST',
              url: 'https://api.bravenewcoin.com/v3/oauth/token',
              headers: {
                'Content-Type': 'application/json'
              },
              body: {
                grant_type: 'client_credentials',
                client_id: 'your client id',
                client_secret: 'your client secret',
                audience: 'requested audience'
              },
              json: true
            };

            request(options, function (error, response, body) {
              if (error) {
                throw new Error(error);
              }

              let access_token = body.access_token;
            });
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  description: Denotes the flow you are using. For Client Credentials use `client_credentials`.
                  type: string
                  example: client_credentials
                client_id:
                  description: Your application's Client ID.
                  type: string
                client_secret:
                  description: Your application's Client Secret.
                  type: string
                audience:
                  description: |
                    The unique identifier of the target API you want to access.

                    Audience                     | Description
                    -----------------------------|------------
                    https://api.bravenewcoin.com | Access the Rest API
                    wss://ws.bravenewcoin.com    | Subscribe to the Websocket Stream
                  type: string
                  example: https://api.bravenewcoin.com
      responses:
        '200':
          description: The authentication response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    description: The access token issued.
                    type: string
                  scope:
                    description: The scope issued.
                    type: string
                  expires_in:
                    description: The number of seconds in which the access token will expire.
                    type: integer
                  token_type:
                    description: The type of token type issued.
                    type: string
  /asset:
    get:
      tags:
        - Asset
      summary: List all assets
      security:
        - auth:
            - read:asset
      description: List all assets or provide a query parameter to search.
      operationId: listAssets
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/asset/ -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: type
          in: query
          description: Only return assets of a particular type.
          required: false
          schema:
            type: string
            enum:
              - FIAT
              - CRYPTO
        - name: symbol
          in: query
          description: Only return assets which have a particular ticker symbol.
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Only return assets which have a particular status.
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
      responses:
        '200':
          description: An object with a `content` property that contains an array of assets. Each entry in the array is a seperate asset resource. If no assets are found then an empty object will be returned. This request should never return an error.
          content:
            application/json:
              schema:
                title: AssetResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
  '/asset/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Asset
      summary: Retrieve an asset
      security:
        - auth:
            - read:asset
      description: Retrieves the details of an asset that has previously been created. Supply the unique identifier of the asset.
      operationId: getAssetById
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/asset/74182afb-c7ea-4856-a65d-a03ab5f72635 -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      responses:
        '200':
          description: The asset which matches the UUID requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '404':
          description: The asset resource cannot be found.
  /market:
    get:
      tags:
        - Market
      summary: List all markets
      security:
        - auth:
            - read:market
      description: List all markets or provide a query parameter to search.
      operationId: listMarkets
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/market/ -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: baseAssetId
          in: query
          description: Only return markets which contain the asset id on the base side of the market.
          required: false
          schema:
            type: string
            format: uuid
        - name: quoteAssetId
          in: query
          description: Only return markets which contain the asset id on the quote side of the market.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: An object with a `content` property that contains an array of markets. Each entry in the array is a seperate market resource. If no markets are found then an empty object will be returned. This request should never return an error.
          content:
            application/json:
              schema:
                type: object
                title: MarketResponse
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Market'
  '/market/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Market
      summary: Retrieve a market
      security:
        - auth:
            - read:market
      description: Retrieves the details of a market that has previously been created. Supply the unique identifier of the market.
      operationId: getMarketById
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/market/74182afb-c7ea-4856-a65d-a03ab5f72635 -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      responses:
        '200':
          description: The market which matches the UUID requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Market'
        '404':
          description: The market resource cannot be found.
  /exchange:
    get:
      tags:
        - Exchange
      summary: List all exchanges
      security:
        - auth:
            - read:exchange
      description: List all exchanges or provide a query parameter to search.
      operationId: listExchanges
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/exchange/ -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: status
          in: query
          description: Only return exchanges which have a particular status.
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
      responses:
        '200':
          description: An object with a `content` property that contains an array of exchanges. Each entry in the array is a seperate exchange resource. If no exchanges are found then an empty object will be returned. This request should never return an error.
          content:
            application/json:
              schema:
                title: ExchangeResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Exchange'
  '/exchange/{id}':
    parameters:
      - $ref: '#/components/parameters/idParam'
    get:
      tags:
        - Exchange
      summary: Retrieve an exchange
      security:
        - auth:
            - read:exchange
      description: Retrieves the details of an exchange that has previously been created. Supply the unique identifier of the exchange.
      operationId: getExchangeById
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/exchange/74182afb-c7ea-4856-a65d-a03ab5f72635 -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      responses:
        '200':
          description: The exchange which matched the UUID requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exchange'
        '404':
          description: The exchange resource cannot be found.
  /exchange-ticker:
    get:
      tags:
        - Exchange Ticker
      summary: List all exchange tickers
      security:
        - auth:
            - read:exchange-ticker
      description: |-
        This API provides ticker information by exchange and market. If no timestamp is provided, then only the most recent ticks will be provided.

        Using this API by **base and quote symbol is not recommended** as it may result in an error when duplicate symbols are found. Searching by marketId is recommended and will result in a faster response.
      operationId: listExchangeTicker
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/exchange-ticker/?timestamp=2018-08-14T05:54:42.395Z&size=100 -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: timestamp
          in: query
          description: >-
            Retrieve all ticks from the timestamp provided.
          required: false
          schema:
            type: string
            format: date-time
        - name: exchangeId
          in: query
          description: Retrieve all ticks for the particular exchange id provided.
          required: false
          schema:
            type: string
            format: uuid
        - name: marketId
          in: query
          description: Retrieve all ticks for the particular market id provided.
          required: false
          schema:
            type: string
            format: uuid
        - name: startAfter
          in: query
          description: Retrieve all ticks starting after this particular id.
          required: false
          schema:
            type: string
            format: uuid
        - name: size
          description: The maximum size to return in the result set. This parameter is ignored if no timestamp is provided.
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 2000
        - name: baseSymbol
          in: query
          description: Retrieve the ticks for the markets which contain the base symbol. If the base symbol is provided then the quote symbol must be provided.
          required: false
          schema:
            type: string
        - name: quoteSymbol
          in: query
          description: Retrieve the ticks for the markets which contain the quote symbol. If the quote symbol is provided, then the base symbol must be provided.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The ticker information by exchange id and market id
          content:
            application/json:
              schema:
                title: TickerResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tick'
                  nextId:
                    description: The next id which can be used as startAfter for pagination
                    type: string
                    format: uuid
  /index-ticker:
    get:
      tags:
        - Index Ticker
      summary: Get all the index tickers
      security:
        - auth:
            - read:index-ticker
      description: |
        This API provides support to get the index tickers. The API allows getting ticks for all the indices. Type parameter can be used
        to filter the type of index being returned.

        Currently the following types of indices are supported -

        | Index Type  | Description                  |
        | ------------|:----------------------------:|
        | MWA         | The Market weighted averages |
        | GWA         | The Global weighted averages |

        Each index type will have an index id which identifies the constituent type used to build the index -

        | Index Type | Index Id  | Output |
        | -----------|:---------:|:---------:|
        | MWA        | Market Id | Average of all tickers for that market |
        | GWA        | Asset Id  | Average of all tickers for that coin / asset |

        Clients are supposed to use this ID to call the other rest API's to get more information about the constituents
        used while building the index.

      operationId: getIndexTicker
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/index-ticker -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: timestamp
          in: query
          description: |
            Retrieve all the indices from the timestamp provided. If no timestamp is provided,
            then the most recent calculated value will be provided.
          required: false
          schema:
            type: string
            format: date-time
        - name: indexType
          in: query
          description: Retrieve the index by the type.
          required: true
          schema:
            type: string
            enum:
              - MWA
              - GWA
        - name: indexId
          in: query
          description: |
            Retrieve all the indices by the particular index id. The index id will differ based on the index type.

            | Index Type | Index Id  |
            | -----------|:---------:|
            | MWA        |Market Id  |
            | GWA        |Asset Id   |

          required: false
          schema:
            type: string
            format: uuid
        - name: startAfter
          in: query
          description: Retrieve all market weighted averages starting after this particular id.
          required: false
          schema:
            type: string
            format: uuid
        - name: size
          description: The maximum size to return in the result set. This parameter is ignored if no timestamp is provided.
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 2000
      responses:
        '200':
          description: The index ticker.
          content:
            application/json:
              schema:
                title: IndexTickerResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/IndexTicker'
                  nextId:
                    description: The next id which can be used as startAfter for pagination
                    type: string
                    format: uuid
  /ohlcv:
    get:
      tags:
        - Open, High, Low, Close, Volumes
      summary: Get end of day Open, High, Low, Close, Volumes
      security:
        - auth:
            - read:ohlcv
      description: |
        Get end of day open, high, low, close and volumes (OHLCV) of market weighted averages or global weighted averages. The 24hr period for end of day is 00:00:00 UTC.

        This API provides the open, high, low, close and volume using the index type provided. If no timestamp is provided, then only the latest averages are returned.

        Currently the following types of indices are supported -

        | Index Type  | Description                  |
        | ------------|:----------------------------:|
        | MWA         | The Market weighted averages |
        | GWA         | The Global weighted averages |

        Each index type will have an index id which identifies the constituent type used to build the index -

        | Index Type | Index Id  | Output |
        | -----------|:---------:|:---------:|
        | MWA        | Market Id | Average of all tickers for that market |
        | GWA        | Asset Id  | Average of all tickers for that coin / asset |
      operationId: listOhlcv
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/ohlcv -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: timestamp
          in: query
          description: |
            Retrieve all market weighted averages OHLCV from the timestamp provided.
          required: false
          schema:
            type: string
            format: date-time
        - name: indexType
          in: query
          description: Retrieve the OHLCV end of day by the index type.
          required: false
          schema:
            type: string
            enum:
              - MWA
              - GWA
        - name: indexId
          in: query
          description: |
            Retrieve all the OHLCV values by the particular index id. The index id will differ based on the index type.

            | Index Type | Index Id  |
            | -----------|:---------:|
            | MWA        |Market Id  |
            | GWA        |Asset Id   |

          required: false
          schema:
            type: string
            format: uuid
        - name: startAfter
          in: query
          description: Retrieve OHLCV for the indexId or indexType required, starting after this particular id.
          required: false
          schema:
            type: string
            format: uuid
        - name: size
          description: The maximum size to return in the result set. This parameter is ignored if no timestamp is provided.
          in: query
          required: false
          schema:
            type: integer
            default: 200
            minimum: 1
            maximum: 2000
      responses:
        '200':
          description: 'The open, high, low, close and volume.'
          content:
            application/json:
              schema:
                title: OpenHighLowCloseVolumeResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/OpenHighLowCloseVolume'
                  nextId:
                    description: The next id which can be used as startAfter for pagination
                    type: string
                    format: uuid
  /market-cap:
    get:
      tags:
        - Market Cap
      summary: |
        List the market capitalisation for assets
      security:
        - auth:
            - read:market-cap
      description: |

        This API will return a list of assets ranked by their market capitalization.

        The Market Cap is calculated based on the free float (or circulating) supply figures and the GWA index price. The Total Market Cap is calculated based on the total supply and the GWA index price.

        If the percentChange parameter is set to true this API will also return movement in percentage of these values over a 24h, 7d or 30d period.

      operationId: listMarketCaps
      x-code-samples:
        - lang: Shell
          label: curl
          source: "curl https://api.bravenewcoin.com/v3/market-cap -H 'Authorization: Bearer test_SiHrnL5NKsea0G2W4LHd' -G"
      parameters:
        - name: assetId
          in: query
          description: The asset id to search
          required: false
          schema:
            type: string
            format: uuid
        - name: percentChange
          in: query
          description: Return the percent change in the values. Currently we support change over 24hour, 7 Days and 30 Days. It is false by default.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 'Market Capitalization by assets'
          content:
            application/json:
              schema:
                title: MarketCapResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/MarketCap'
  /price:
    get:
      tags:
        - Rates
      summary: List all prices for a particular asset
      description: |
        ** THIS ENDPOINT IS CURRENTLY NOT AVAILABLE **

        Provides the ability to get the price of a specific asset in all other assets.
      operationId: listAssetPrice
      parameters:
        - name: assetId
          in: query
          description: The asset id to get the prices for
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All of the prices for the asset
          content:
            application/json:
              schema:
                title: PriceResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        assetId:
                          description: The asset the converted price is for
                          type: string
                        prices:
                          description: The list of prices for the asset
                          type: array
                          items:
                            type: object
                            properties:
                              assetId:
                                description: The asset id the exchange rate is for
                                type: string
                              price:
                                description: the exchange rate
                                type: string
  /convert:
    get:
      tags:
        - Rates
      summary: Convert the value of one asset into another asset
      description: |
        ** THIS ENDPOINT IS CURRENTLY NOT AVAILABLE **

        Provides the ability to convert one asset into another asset.
      operationId: convertAsset
      parameters:
        - name: fromAssetId
          in: query
          description: The asset id to convert from
          required: true
          schema:
            type: string
            format: uuid
        - name: toAssetId
          in: query
          description: The asset id to convert to
          required: true
          schema:
            type: string
            format: uuid
        - name: amount
          in: query
          description: The amount of the asset to convert
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The rate and converted value
          content:
            application/json:
              schema:
                title: ConvertResponse
                type: object
                properties:
                  fromAssetId:
                    description: The asset to convert from
                    type: string
                  toAssetId:
                    description: The asset to convert to
                    type: string
                  amount:
                    description: The amount of the from asset to convert
                    type: string
                  rate:
                    description: The rate used for the converstion
                    type: string
                  timestamp:
                    description: The timestamp of the rate used
                    type: string
                    format: date-time
                  result:
                    description: The conversion result
                    type: string
  /rates:
    get:
      tags:
        - Rates
      summary: Convert the value of one asset into another asset
      description: |
        ** THIS ENDPOINT IS CURRENTLY NOT AVAILABLE **

        Provides the ability to convert one asset into another asset.
      operationId: getExchangeRates
      parameters:
        - name: baseAssetId
          in: query
          description: The base asset id to get the rates for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The latest exchange rate data for a particular base asset
          content:
            application/json:
              schema:
                title: RatesResponse
                type: object
                properties:
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        baseAssetId:
                          description: The base asset id
                          type: string
                        rates:
                          description: The exchange rates for all currencies
                          type: array
                          items:
                            type: object
                            properties:
                              timestamp:
                                description: The timestamp when the rates were published
                                type: string
                                format: date-time
                              assetId:
                                description: The asset id the exchange rate is for
                                type: string
                              rate:
                                description: the exchange rate
                                type: string
  /taxonomy/general:
    get:
      tags:
        - Taxonomy
      operationId: getTaxonomyGenerals
      summary: Get a restricted subset of taxonomy data for all assets
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  content:
                    items:
                      properties:
                        assetProfile:
                          type: object
                          properties:
                            assetId: 
                                description: Unique ID used to identify a asset
                                format: uuid 
                                type: string
                            assetDescription: 
                                description: 'Brief explanation of the assets main features, purpose and specifications.'
                                type: string
                            bncAssetIconUrl: 
                                description: Official cryptographic asset logo 
                                format: uri 
                                type: string
                            bncUrl: 
                                description: BNC stable asset URL
                                format: uri
                                type: string
                            classification: {description: 'The General Taxonomy
                              divides the superclass of Cryptographic Assets into two
                              broad families. General Cryptographic Assets and Protocol
                              Tokens. General Cryptographic Assets represent programmable
                              value that can be used by anyone, in any sector of industry
                              and society, as  a capital, transformable/consumable,
                              or a store of value asset. These assets also serve as
                              the foundation where Protocol Tokens are created, issued
                              and operated. Protocol Tokens represent a claim to a capital,
                              transformable/consumable, or a store of value asset. However,
                              since they can only capture a specific market segment
                              this effectively limits their use as store of value. Define
                              whether a token is either "General Cryptographic Asset"
                              or "Protocol Token." GCAs have an underlying CONSENSUS  ALGORITHM
                              (e.g. PoW, PoS, DPoS, etc) while PTs are issued on top
                              of a GCA. These sources will detail wether the asset has
                              an underlying consensus algorithm/protocol (therefore
                              a GCA) or a token standard (e.g. ERC20 and therefore a
                              PT)' , type: string}
                            codebase: {description: 'Source code from original
                              protocol (if applicable). Specify whether a given GCA
                              has been "FORKED" from a previous project. ' , type: string}
                            economicproperties:
                              type: object
                              properties:
                                capitalAsset: {description: 'Describes
                                  if the asset provides an ongoing source of value and can
                                  be priced on the basis of the net present value of its
                                  expected returns. Answers the question: Does the asset
                                  provide a periodic source of value/income (e.g. from network
                                  fees, revenue stream, profit sharing, dividend payout)
                                  whether by token burning, buyback, or token distribution
                                  (airdrop)?' , type: string}
                                commodity: {description: 'Describe
                                  if the asset can be used as a primary input to build other
                                  products, services, platforms, applications.  Answers
                                  the question: Can the asset be used as a building block
                                  for other platforms/applications?' , type: boolean}
                                storeOfValue: {description: 'Describe
                                  if the asset has value and can successfully store it over
                                  the long term. Answers the question: Does the asset represent
                                  a viable form of long term store of value?' , type: boolean}
                                genesisDateUtc: {description: 'First block creation
                                  time (UTC) or the token generation date.', format: date-time,
                                  type: string}
                                governingBody: {description: 'Name and link to
                                  website of team, institution or system in charge of protocol
                                  development, maintenance and implementation decisions.',
                                  type: string}
                            homeUrl: {description: "Official asset's URL.",
                              format: uri , type: string}
                            name: {description: 'Official name of the cryptographic
                                asset.' , type: string}
                            nicheMarket: {description: 'The General Taxonomy
                              niche market is the most granular level of BNCs 3 Tiered
                              propriety industry classification system. This define
                              the industry that a Cryptoasset will impact.' , type: string}
                            parentChain: {description: 'Underlying protocol
                              used to issue a Protocol Token. This metric only applies
                              to Protocol Tokens. Specify the underlying protocol where
                              this token has been issued.' , type: string}
                            scriptingLanguages:
                              description: 'System to perform computations and validate
                              trace data.'
                              items: {type: string}
                              type: array
                            sector: {description: 'The General Taxonomy sector
                              is the first level of BNCs 3 Tiered propriety industry
                              classification system. This defines the industry that
                              a Crypoasset will impact.' , type: string}
                            smartContractSupport: {description: 'Current
                              support for Turing-Complete, or computationally equivalent,
                              applications with a state stored in the distributed ledger,
                              facilitating, verifying, or enforcing the negotiation
                              or performance of a contract.' , type: boolean}
                            subClassification: {description: 'The Asset Classification
                              can be further divided into a range of sub classifications',
                              type: string}
                            subSector: {description: 'The General Taxonomy
                              sub-sector is the second level of BNCs 3 Tiered propriety
                              industry classification system. This define the industry
                              that a Cryptoasset will impact.' , type: string}
                            symbol: {description: 'Alphanumerical asset code.',
                              type: string}
                            tokenStandard: {description: 'Common set of rules
                              for Protocol Tokens issued under a specific protocol.
                              "Token standard field is only applicable for Protocol
                              Tokens, i.e. tokens issued on an underlying blockchain.  N/A  is
                              assigned when a token is native to underlying protocol;
                              and ""NO INFO"" when the protocol token has no issue standard"',
                              type: string}
                            transactionIdentity: {description: 'Degree of
                              transparency and traceability of transactions in the protocols
                              network. A value of "Anonymous" is assigned if transactions
                              cannot be traced nor identified by anyone, "Pseudonymous"
                              when transactions and users can be identified only by
                              specialized analysis, "Private" when transactions and
                              users identities are only known to the organization running
                              the protocol, "Transparent" when transactions and users
                              identities are public, and "Selective Transparency" when
                              is possible to optionally send transactions anonymously
                              or transparently.' , type: string}
                        blockchainData:
                          type: object
                          properties:
                            averageBlockTime: {description: 'Average block
                              confirmation time in seconds as stated in the documentation
                              of the latest protocol version release.' , type: number}
                            consensusModel: {description: 'Economic measure
                              by which the protocol executes and validates the outcome
                              of a transaction on the network by all involved members.
                              Specify the assets (generally only applicable to GCAs)
                              consensus algorithm (e.g. PoW, PoS, DPoS, etc.)' , type: string}
                            consensusModelGroup: {description: 'This groups
                              the individual consensus models into a broader category.
                              Ie Proof-of-Work-Time would be selected into the "Proof-of-Work"
                              group.' , type: string}
                            distributions:
                              description: Mining or minting compatibility of how the
                                network is secured.
                              
                              items: {type: object, 
                                properties: {
                                  id: {
                                    description: 'ID for the distribution method',
                                    format: uuid,
                                    type: string
                                  },
                                  process: {
                                    description: 'The process used to distribute the asset',
                                    type: string
                                  },
                                  processType: {
                                    description: 'The type of process used to distribute the asset',
                                    type: string
                                  }
                                }
                              }
                              type: array
                            contractAddress: {description: 'Address of the
                              account holding object on a specific blockchain.' , type: string}
                            creatorAddress: {description: 'Protocol address
                              of the creating/issuing entity of a token/contract' , type: string}
                            creatorTransactionHash: {description: 'Transaction
                              hash of the token/contract creation' , type: string}
                            explorer: {description: 'An explorer url to
                              the associated address.', format: uri , type: string}
                            hashingAlgorithms:
                              description: The collection of hashing algorithm related
                                information for this asset
                              items: {
                                type: object, 
                                properties: {
                                  id: {
                                    description: 'ID for the hashing algorithm',
                                    format: uuid,
                                    type: string
                                  },
                                  hashingAlgorithm: {description: 'Secure
                                    hashing algorithm used by the protocol' , type: "string"},
                                  hashingAlgorithmGroup: {
                                    description: ' A top level group where individual hashing algorithms have
                                    been categorized. Eg SHA-256, SHA-512 and SHA-512d have
                                    been grouped into the "SHA Family"', type: "string"}
                                }
                              }
                              type: array
                            masternodeSupport: {description: 'Protocols
                              support for Masternodes, i.e. computers that run a full
                              protocols client to validate transactions and provide
                              network functionality.' , type: boolean}
                        marketData:
                          type: object
                          properties:
                            dailyPctChangePrice: {description: 'The percentage
                              change for the price for the whole day', type: number}
                            dailyVolumeUsd: {description: 'The daily volume
                              for the asset/usd market' , type: number}
                            freeFloatMarketCapitalization: {description: 'Free Float Market Capitalization 
                              is used to determine the relative size of a Cryptoasset. This
                              is calculated by multiplying the price by the Free Float Supply.'}
                            freeFloatSupply: {description: 'The circulating supply of the asset. It is the total 
                              supply less any supply that has been removed from circulation.' , type: number}
                            maxSupply: {description: 'The maximum supply of the asset that
                              could possibly be in circulation' , type: number}
                            spotPriceUsd: {description: 'The spot price in USD
                              for the asset' , type: number}
                            totalMarketCapitalization: {description: 'Total Market Capitalization
                              is used to determine the relative size of a Cryptoasset.
                              This is calculated by multiplying the price by the Total
                              Supply.' , type: number}
                            totalSupply: 
                              description: 'The total supply of the asset'
                              type: number
                        semver:
                          type: object
                          properties:
                            sourceCode: {description: 'The main repository for a
                            projects codebase', format: uri , type: string}
                            sourceCodeChildRepo: {description: 'The most active
                              source code repository for a given project', format: uri,
                              type: string}
                            whitepaper: {description: 'Link to stable URL of the
                              assets whitepaper', format: uri , type: string}
                            announcementUrl: {description: 'URL of the initial project
                            announcement in a public form', format: uri , type: string}
                        social:
                          type: object
                          properties:
                            blogUrl: {description: 'URL of projects official Blog
                              page', format: uri , type: string}
                            facebookUrl: {description: 'URL of projects official
                              Facebook page', format: uri , type: string}
                            forumUrl: {description: 'URL of projects official Forum
                              page', format: uri , type: string}
                            googleplusUrl: {description: 'URL of projects official
                              Googleplus page', format: uri , type: string}
                            instagramUrl: {description: 'URL of projects official
                              Instagram page', format: uri , type: string}
                            linkedinUrl: {description: 'URL of projects official
                              LinkedIn page', format: uri , type: string}
                            pinterestUrl: {description: 'URL of projects official
                              Pinterest page', format: uri , type: string}
                            redditUrl: {description: 'URL of projects official Reddit
                              page', format: uri , type: string}
                            slackUrl: {description: 'URL of projects official Slack
                              page', format: uri , type: string}
                            telegramUrl: {description: 'URL of projects official
                              Telegram page', format: uri , type: string}
                            twitterUrl: {description: 'URL of projects official
                              Twitter page', format: uri , type: string}
                            youtubeUrl: {description: 'URL of projects official
                              Youtube page', format: uri , type: string}
                      type: object
                    type: array
                title: TaxonomyGeneralResponse
                type: object
      security:
      - auth: ['read:taxonomy-general']
  '/taxonomy/general/{id}':
    get:
      tags:
        - Taxonomy
      operationId: getTaxonomyGeneral
      summary: Get a restricted subset of taxonomy data for specific assets
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                    assetProfile:
                      type: object
                      properties:
                        assetId: 
                            description: Unique ID used to identify a asset
                            format: uuid 
                            type: string
                        assetDescription: 
                            description: 'Brief explanation of the assets main features, purpose and specifications.'
                            type: string
                        bncAssetIconUrl: 
                            description: Official cryptographic asset logo 
                            format: uri 
                            type: string
                        bncUrl: 
                            description: BNC stable asset URL
                            format: uri
                            type: string
                        classification: {description: 'The General Taxonomy
                          divides the superclass of Cryptographic Assets into two
                          broad families. General Cryptographic Assets and Protocol
                          Tokens. General Cryptographic Assets represent programmable
                          value that can be used by anyone, in any sector of industry
                          and society, as  a capital, transformable/consumable,
                          or a store of value asset. These assets also serve as
                          the foundation where Protocol Tokens are created, issued
                          and operated. Protocol Tokens represent a claim to a capital,
                          transformable/consumable, or a store of value asset. However,
                          since they can only capture a specific market segment
                          this effectively limits their use as store of value. Define
                          whether a token is either "General Cryptographic Asset"
                          or "Protocol Token." GCAs have an underlying CONSENSUS  ALGORITHM
                          (e.g. PoW, PoS, DPoS, etc) while PTs are issued on top
                          of a GCA. These sources will detail wether the asset has
                          an underlying consensus algorithm/protocol (therefore
                          a GCA) or a token standard (e.g. ERC20 and therefore a
                          PT)' , type: string}
                        codebase: {description: 'Source code from original
                          protocol (if applicable). Specify whether a given GCA
                          has been "FORKED" from a previous project. ' , type: string}
                        economicproperties:
                          type: object
                          properties:
                            capitalAsset: {description: 'Describes
                              if the asset provides an ongoing source of value and can
                              be priced on the basis of the net present value of its
                              expected returns. Answers the question: Does the asset
                              provide a periodic source of value/income (e.g. from network
                              fees, revenue stream, profit sharing, dividend payout)
                              whether by token burning, buyback, or token distribution
                              (airdrop)?' , type: string}
                            commodity: {description: 'Describe
                              if the asset can be used as a primary input to build other
                              products, services, platforms, applications.  Answers
                              the question: Can the asset be used as a building block
                              for other platforms/applications?' , type: boolean}
                            storeOfValue: {description: 'Describe
                              if the asset has value and can successfully store it over
                              the long term. Answers the question: Does the asset represent
                              a viable form of long term store of value?' , type: boolean}
                            genesisDateUtc: {description: 'First block creation
                              time (UTC) or the token generation date.', format: date-time,
                              type: string}
                            governingBody: {description: 'Name and link to
                              website of team, institution or system in charge of protocol
                              development, maintenance and implementation decisions.',
                              type: string}
                        homeUrl: {description: 'Official asset’s URL.',
                          format: uri , type: string}
                        name: {description: 'Official name of the cryptographic
                            asset.' , type: string}
                        nicheMarket: {description: 'The General Taxonomy
                          niche market is the most granular level of BNCs 3 Tiered
                          propriety industry classification system. This define
                          the industry that a Cryptoasset will impact.' , type: string}
                        parentChain: {description: 'Underlying protocol
                          used to issue a Protocol Token. This metric only applies
                          to Protocol Tokens. Specify the underlying protocol where
                          this token has been issued.' , type: string}
                        scriptingLanguages:
                          description: 'System to perform computations and validate
                          trace data.'
                          items: {type: string}
                          type: array
                        sector: {description: 'The General Taxonomy sector
                          is the first level of BNCs 3 Tiered propriety industry
                          classification system. This defines the industry that
                          a Crypoasset will impact.' , type: string}
                        smartContractSupport: {description: 'Current
                          support for Turing-Complete, or computationally equivalent,
                          applications with a state stored in the distributed ledger,
                          facilitating, verifying, or enforcing the negotiation
                          or performance of a contract.' , type: boolean}
                        subClassification: {description: 'The Asset Classification
                          can be further divided into a range of sub classifications',
                          type: string}
                        subSector: {description: 'The General Taxonomy
                          sub-sector is the second level of BNCs 3 Tiered propriety
                          industry classification system. This define the industry
                          that a Cryptoasset will impact.' , type: string}
                        symbol: {description: 'Alphanumerical asset code.',
                          type: string}
                        tokenStandard: {description: 'Common set of rules
                          for Protocol Tokens issued under a specific protocol.
                          "Token standard field is only applicable for Protocol
                          Tokens, i.e. tokens issued on an underlying blockchain.  N/A  is
                          assigned when a token is native to underlying protocol;
                          and ""NO INFO"" when the protocol token has no issue standard"',
                          type: string}
                        transactionIdentity: {description: 'Degree of
                          transparency and traceability of transactions in the protocols
                          network. A value of "Anonymous" is assigned if transactions
                          cannot be traced nor identified by anyone, "Pseudonymous"
                          when transactions and users can be identified only by
                          specialized analysis, "Private" when transactions and
                          users identities are only known to the organization running
                          the protocol, "Transparent" when transactions and users
                          identities are public, and "Selective Transparency" when
                          is possible to optionally send transactions anonymously
                          or transparently.' , type: string}
                    blockchainData:
                      type: object
                      properties:
                        averageBlockTime: {description: 'Average block
                          confirmation time in seconds as stated in the documentation
                          of the latest protocol version release.' , type: number}
                        consensusModel: {description: 'Economic measure
                          by which the protocol executes and validates the outcome
                          of a transaction on the network by all involved members.
                          Specify the assets (generally only applicable to GCAs)
                          consensus algorithm (e.g. PoW, PoS, DPoS, etc.)' , type: string}
                        consensusModelGroup: {description: 'This groups
                          the individual consensus models into a broader category.
                          Ie Proof-of-Work-Time would be selected into the "Proof-of-Work"
                          group.' , type: string}
                        contractAddress: {description: 'Address of the
                          account holding object on a specific blockchain.' , type: string}
                        creatorAddress: {description: 'Protocol address
                          of the creating/issuing entity of a token/contract' , type: string}
                        creatorTransactionHash: {description: 'Transaction
                          hash of the token/contract creation' , type: string}
                        explorer: {description: 'An explorer url to
                          the associated address.', format: uri , type: string}
                        hashingAlgorithms:
                          description: The collection of hashing algorithm related
                            information for this asset
                          items: {
                            type: object, 
                            properties: {
                              hashingAlgorithm: {description: 'Secure
                                hashing algorithm used by the protocol' , type: string},
                              hashingAlgorithmGroup: {description: 'A
                                top level group where individual hashing algorithms have
                                been categorized. Eg SHA-256, SHA-512 and SHA-512d have
                                been group into the "SHA Family"' , type: string}
                            }
                          }
                          type: array
                        masternodeSupport: {description: 'Protocols
                          support for Masternodes, i.e. computers that run a full
                          protocols client to validate transactions and provide
                          network functionality.' , type: boolean}
                    marketData:
                      type: object
                      properties:
                        dailyPctChangePrice: {description: 'The percentage
                          change for the price for the whole day', type: number}
                        dailyVolumeUsd: {description: 'The daily volume
                          for the asset/usd market' , type: number}
                        freeFloatMarketCapitalization: {description: 'Free Float Market Capitalization 
                          is used to determine the relative size of a Cryptoasset. This
                          is calculated by multiplying the price by the Free Float Supply.'}
                        freeFloatSupply: {description: 'The circulating supply of the asset. It is the total 
                          supply less any supply that has been removed from circulation.' , type: number}
                        maxSupply: {description: 'The maximum supply of the asset that
                          could possibly be in circulation' , type: number}
                        spotPriceUsd: {description: 'The spot price in USD
                          for the asset' , type: number}
                        totalMarketCapitalization: {description: 'Total Market Capitalization
                          is used to determine the relative size of a Cryptoasset.
                          This is calculated by multiplying the price by the Total
                          Supply.' , type: number}
                        totalSupply: 
                          description: 'The total supply of the asset'
                          type: number
                    semver:
                      type: object
                      properties:
                        sourceCode: {description: 'The main repository for a
                        projects codebase', format: uri , type: string}
                        sourceCodeChildRepo: {description: 'The most active
                          source code repository for a given project', format: uri,
                          type: string}
                        whitepaper: {description: 'Link to stable URL of the
                          assets whitepaper', format: uri , type: string}
                        announcementUrl: {description: 'URL of the initial project
                        announcement in a public form', format: uri , type: string}
                    social:
                      type: object
                      properties:
                        blogUrl: {description: 'URL of projects official Blog
                          page', format: uri , type: string}
                        facebookUrl: {description: 'URL of projects official
                          Facebook page', format: uri , type: string}
                        forumUrl: {description: 'URL of projects official Forum
                          page', format: uri , type: string}
                        googleplusUrl: {description: 'URL of projects official
                          Googleplus page', format: uri , type: string}
                        instagramUrl: {description: 'URL of projects official
                          Instagram page', format: uri , type: string}
                        linkedinUrl: {description: 'URL of projects official
                          LinkedIn page', format: uri , type: string}
                        pinterestUrl: {description: 'URL of projects official
                          Pinterest page', format: uri , type: string}
                        redditUrl: {description: 'URL of projects official Reddit
                          page', format: uri , type: string}
                        slackUrl: {description: 'URL of projects official Slack
                          page', format: uri , type: string}
                        telegramUrl: {description: 'URL of projects official
                          Telegram page', format: uri , type: string}
                        twitterUrl: {description: 'URL of projects official
                          Twitter page', format: uri , type: string}
                        youtubeUrl: {description: 'URL of projects official
                          Youtube page', format: uri , type: string}
                title: TaxonomyGeneralResponse
                type: object
      security:
      - auth: ['read:taxonomy-general']
    parameters:
    - {$ref: '#/components/parameters/idParam'}
  /taxonomy/asset:
    get:
      tags:
        - Taxonomy
      summary: Get all the taxonomy fields for all the assets
      operationId: getTaxonomyAssets
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  content:
                    items:
                      properties:
                        announcementUrl: {description: 'URL of the initial project
                            announcement in a public form', format: uri , type: string}
                        annualStakingInterest: {description: 'The interest earned on
                            a staking token for holding the asset.' , type: string}
                        assetDescription: {description: 'Brief explanation of the
                            assets main features, purpose and specifications.' , type: string}
                        assetId: {description: 'Unique ID used to identify asset.',
                          format: uuid' , type: string}
                        averageBlockTime: {description: 'Average block confirmation
                            time in seconds as stated in the documentation of the
                            latest protocol version release.' , type: number}
                        blockHalving: {description: 'Interval of blocks between block
                            reward halving.' , type: string}
                        blockHeight: {description: 'Number of blocks in the chain between
                            the latest measurement and the genesis block.' , type: string}
                        blockReward: {description: 'Number of native tokens created
                            each time a transaction validator discovers a new block
                            during the current Reward Era.' , type: string}
                        blogUrl: {description: 'URL of projects official Blog page',
                          format: uri , type: string}
                        bncAssetIconUrl: {description: 'Official cryptographic asset
                            logo.', format: uri , type: string}
                        bncCurrencyDetailsId: {description: 'The ID that maps to the
                            V1 Market Data system.' , type: number}
                        bncUrl: {description: 'BNC stable asset URL.', format: uri ,
                          type: string}
                        btcBlockHeightOnCreationDate: {description: 'The latest block
                            height of the Bitcoin chain when the asset was created.' ,
                          type: string}
                        burned: {description: 'Total amount of tokens that have been
                            verifiably burned or removed from the maximum supply.',
                          type: string}
                        classification: {description: 'The General Taxonomy divides
                            the superclass of Cryptographic Assets into two broad
                            families. General Cryptographic Assets and Protocol Tokens.
                            General Cryptographic Assets represent programmable value
                            that can be used by anyone, in any sector of industry
                            and society, as  a capital, transformable/consumable,
                            or a store of value asset. These assets also serve as
                            the foundation where Protocol Tokens are created, issued
                            and operated. Protocol Tokens represent a claim to a capital,
                            transformable/consumable, or a store of value asset. However,
                            since they can only capture a specific market segment
                            this effectively limits their use as store of value. Define
                            whether a token is either "General Cryptographic Asset"
                            or "Protocol Token." GCAs have an underlying CONSENSUS  ALGORITHM
                            (e.g. PoW, PoS, DPoS, etc) while PTs are issued on top
                            of a GCA. These sources will detail wether the asset has
                            an underlying consensus algorithm/protocol (therefore
                            a GCA) or a token standard (e.g. ERC20 and therefore a
                            PT)' , type: string}
                        codebase: {description: 'Source code from original protocol
                            (if applicable). Specify whether a given GCA has been
                            "FORKED" from a previous project. ' , type: string}
                        consensusModel: {description: 'Economic measure by which the
                            protocol executes and validates the outcome of a transaction
                            on the network by all involved members. Specify the assets
                            (generally only applicable to GCAs) consensus algorithm
                            (e.g. PoW, PoS, DPoS, etc.)' , type: string}
                        consensusModelGroup: {description: 'This groups the individual
                            consensus models into a broader category. Ie Proof-of-Work-Time
                            would be selected into the "Proof-of-Work" group.' , type: string}
                        contractAddress: {description: 'Address of the account holding
                            object on a specific blockchain.' , type: string}
                        creatorAddress: {description: 'Protocol address of the creating/issuing
                            entity of a token/contract' , type: string}
                        creatorTransactionHash: {description: 'Transaction hash of
                            the token/contract creation' , type: string}
                        difficulty: {description: 'Measure of how difficult it is to
                            find the hash of a blocks header below a given target',
                          type: string}
                        difficultyAlgorithm: {description: 'Algorithm used to define
                            the networks difficulty target' , type: string}
                        difficultyCycle: {description: 'Number of blocks between difficulty
                            adjustment' , type: string}
                        distributions:
                          description: Mining or minting compatibility of how the
                            network is secured.
                          items: {type: object, 
                            properties: {
                              id: {
                                description: 'ID for the distribution method',
                                format: uuid,
                                type: string
                              },
                              process: {
                                description: 'The process used to distribute the asset',
                                type: string
                              },
                              processType: {
                                description: 'The type of process used to distribute the asset',
                                type: string
                              }
                            }
                          }
                          type: array
                        economicpropertiesCapitalAsset: {description: 'Describes if
                            the asset provides an ongoing source of value and can
                            be priced on the basis of the net present value of its
                            expected returns. Answers the question: Does the asset
                            provide a periodic source of value/income (e.g. from network
                            fees, revenue stream, profit sharing, dividend payout)
                            whether by token burning, buyback, or token distribution
                            (airdrop)?' , type: string}
                        economicpropertiesCommodity: {description: 'Describe if the
                            asset can be used as a primary input to build other products,
                            services, platforms, applications.  Answers the question:
                            Can the asset be used as a building block for other platforms/applications?',
                          type: boolean}
                        economicpropertiesSov: {description: 'Describe if the asset
                            has value and can successfully store it over the long
                            term. Answers the question: Does the asset represent a
                            viable form of long term store of value?' , type: boolean}
                        ethBlockHeightOnCreationDate: {description: 'The latest block
                            height of the Ethereum chain when the asset was created.',
                          type: string}
                        explorer: {description: 'An explorer url to the associated
                            address.', format: uri , type: string}
                        facebookUrl: {description: 'URL of projects official Facebook
                            page', format: uri , type: string}
                        forumUrl: {description: 'URL of projects official Forum page',
                          format: uri , type: string}
                        freeFloatMarketCapitalization: {description: 'Free Float Market
                            Capitalization is used to determine the relative size
                            of a Cryptoasset. This is calculated by multiplying the
                            price by the Free Float Supply.' , type: number}
                        genesisDateUtc: {description: 'First block creation time (UTC)
                            or the token generation date.', format: date-time' , type: string}
                        googleplusUrl: {description: 'URL of projects official Googleplus
                            page', format: uri , type: string}
                        governingBody: {description: 'Name and link to website of
                            team, institution or system in charge of protocol development,
                            maintenance and implementation decisions.' , type: string}
                        hashingAlgorithms:
                          description: The collection of hashing algorithm related
                            information for this asset
                          items: {
                            type: object, 
                            properties: {
                              hashingAlgorithm: {description: 'Secure
                                hashing algorithm used by the protocol' , type: string},
                              hashingAlgorithmGroup: {description: 'A
                                top level group where individual hashing algorithms have
                                been categorized. Eg SHA-256, SHA-512 and SHA-512d have
                                been group into the "SHA Family"' , type: string}
                            }
                          }
                          type: array
                        hashrate: {description: 'The daily amount of hashes it takes
                            to compute an operation, measured as number of Giga hashes
                            per second (billions of hashes per second) the protocols
                            network is performing. Only applicable to General Cryptographic
                            Assets.' , type: string}
                        homeUrl: {description: 'Official asset’s URL.', format: uri,
                          type: string}
                        instagramUrl: {description: 'URL of projects official Instagram
                            page', format: uri , type: string}
                        interimToken: {description: 'Describes if the Cryptoasset which
                            is currently a Protocol Token is meant to evolve into
                            his own blockchain in further roadmap stages.' , type: string}
                        linkedinUrl: {description: 'URL of projects official Linkedin
                            page', format: uri , type: string}
                        masternodeCollateral: {description: 'The amount of that asset
                            that is required to become a masternode.', format: uuid,
                          type: string}
                        masternodeSupport: {description: 'Protocol’s support for Masternodes,
                            i.e. computers that run a full protocol’s client to validate
                            transactions and provide network functionality.' , type: boolean}
                        maxSupply: {description: 'The maximum supply of the asset that
                            could possibly be in circulation' , type: string}
                        maximumStakeAge: {description: 'Number of days required to
                            achieve the greatest probability of signing the next block.',
                          type: string}
                        minimumStakeAgeDays: {description: 'Number of days required
                            to achieve a reasonable probability of signing the next
                            block.' , type: string}
                        minimumStakeQuantity: {description: 'The minimum amount of
                            the asset that needs to be held to earn interest from
                            staking.' , type: string}
                        minimumTransactionFee: {description: 'The minimum fee to pay
                            in order to complete a transaction on the assets blockchain.',
                          type: string}
                        name: {description: 'Official name of the cryptographic asset.',
                          type: string}
                        nicheMarket: {description: 'The General Taxonomy niche market
                            is the most granular level of BNCs 3 Tiered propriety
                            industry classification system. This define the industry
                            that a Cryptoasset will impact.' , type: string}
                        parentChain: {description: 'Underlying protocol used to issue
                            a Protocol Token. This metric only applies to Protocol
                            Tokens. Specify the underlying protocol where this token
                            has been issued.' , type: string}
                        pinterestUrl: {description: 'URL of projects official Pinterest
                            page', format: uri , type: string}
                        premine: {description: 'Number of tokens allocated previous
                            to public circulation and have been premined in the genesis
                            block.' , type: string}
                        redditUrl: {description: 'URL of projects official Reddit page',
                          format: uri , type: string}
                        reserved: {description: 'Number of tokens allocated previous
                            to public circulation and or reserved in a vesting period
                            which cant be spent.' , type: string}
                        scriptingLanguages:
                          description: System to perform computations and validate
                            trace data.
                          items: {type: string}
                          type: array
                        sector: {description: 'The General Taxonomy sector is the first
                            level of BNCs 3 Tiered propriety industry classification
                            system. This defines the industry that a Crypoasset will
                            impact.' , type: string}
                        slackUrl: {description: 'URL of projects official Slack page',
                          format: uri , type: string}
                        smartContractSupport: {description: 'Current support for Turing-Complete,
                            or computationally equivalent, applications with a state
                            stored in the distributed ledger, facilitating, verifying,
                            or enforcing the negotiation or performance of a contract.',
                          type: boolean}
                        sourceCode: {description: 'The main repository for a projects
                            codebase', format: uri , type: string}
                        sourceCodeChildRepo: {description: 'The most active source
                            code repository for a given project', format: uri , type: string}
                        subClassification: {description: 'The Asset Classification
                            can be further divided into a range of sub classifications',
                          type: string}
                        subSector: {description: 'The General Taxonomy sub-sector is
                            the second level of BNCs 3 Tiered propriety industry classification
                            system. This define the industry that a Cryptoasset will
                            impact.' , type: string}
                        symbol: {description: 'Alphanumerical asset code.' , type: string}
                        telegramUrl: {description: 'URL of projects official Telegram
                            page', format: uri , type: string}
                        tokenStandard: {description: 'Common set of rules for Protocol
                            Tokens issued under a specific protocol. "Token standard
                            field is only applicable for Protocol Tokens, i.e. tokens
                            issued on an underlying blockchain.  N/A  is assigned
                            when a token is native to underlying protocol; and ""NO
                            INFO"" when the protocol token has no issue standard"',
                          type: string}
                        totalMarketCapitalization: {description: 'Total Market Capitalization
                            is used to determine the relative size of a Cryptoasset.
                            This is calculated by multiplying the price by the Total
                            Supply.' , type: number}
                        transactionIdentity: {description: 'Degree of transparency
                            and traceability of transactions in the protocols network.
                            A value of "Anonymous" is assigned if transactions cannot
                            be traced nor identified by anyone, "Pseudonymous" when
                            transactions and users can be identified only by specialized
                            analysis, "Private" when transactions and users identities
                            are only known to the organization running the protocol,
                            "Transparent" when transactions and users identities are
                            public, and "Selective Transparency" when is possible
                            to optionally send transactions anonymously or transparently.',
                          type: string}
                        twitterUrl: {description: 'URL of projects official Twitter
                            page', format: uri , type: string}
                        whitepaper: {description: 'Link to stable URL of the assets
                            whitepaper', format: uri , type: string}
                        youtubeUrl: {description: 'URL of projects official Youtube
                            page', format: uri , type: string}
                      type: object
                    type: array
                title: TaxonomyAssetResponse
                type: object
      security:
      - auth: ['read:taxonomy-asset']
  '/taxonomy/asset/{id}':
    get:
      operationId: getTaxonomyAsset
      tags:
        - Taxonomy
      summary: Get all the taxonomy fields for specific assets
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  announcementUrl: {description: 'URL of the initial project announcement
                      in a public form', format: uri , type: string}
                  annualStakingInterest: {description: 'The interest earned on a staking
                      token for holding the asset.' , type: string}
                  assetDescription: {description: 'Brief explanation of the assets
                      main features, purpose and specifications.' , type: string}
                  assetId: {description: 'Unique ID used to identify asset.', format: uuid,
                    type: string}
                  averageBlockTime: {description: 'Average block confirmation time
                      in seconds as stated in the documentation of the latest protocol
                      version release.' , type: number}
                  blockHalving: {description: 'Interval of blocks between block reward
                      halving.' , type: string}
                  blockHeight: {description: 'Number of blocks in the chain between
                      the latest measurement and the genesis block.' , type: string}
                  blockReward: {description: 'Number of native tokens created each
                      time a transaction validator discovers a new block during the
                      current Reward Era.' , type: string}
                  blogUrl: {description: 'URL of projects official Blog page', format: uri,
                    type: string}
                  bncAssetIconUrl: {description: 'Official cryptographic asset logo.',
                    format: uri , type: string}
                  bncCurrencyDetailsId: {description: 'The ID that maps to the V1 Market
                      Data system.' , type: number}
                  bncUrl: {description: 'BNC stable asset URL.', format: uri , type: string}
                  btcBlockHeightOnCreationDate: {description: 'The latest block height
                      of the Bitcoin chain when the asset was created.' , type: string}
                  burned: {description: 'Total amount of tokens that have been verifiably
                      burned or removed from the maximum supply.' , type: string}
                  classification: {description: 'The General Taxonomy divides the
                      superclass of Cryptographic Assets into two broad families.
                      General Cryptographic Assets and Protocol Tokens. General Cryptographic
                      Assets represent programmable value that can be used by anyone,
                      in any sector of industry and society, as  a capital, transformable/consumable,
                      or a store of value asset. These assets also serve as the foundation
                      where Protocol Tokens are created, issued and operated. Protocol
                      Tokens represent a claim to a capital, transformable/consumable,
                      or a store of value asset. However, since they can only capture
                      a specific market segment this effectively limits their use
                      as store of value. Define whether a token is either "General
                      Cryptographic Asset" or "Protocol Token." GCAs have an underlying
                      CONSENSUS  ALGORITHM (e.g. PoW, PoS, DPoS, etc) while PTs are
                      issued on top of a GCA. These sources will detail wether the
                      asset has an underlying consensus algorithm/protocol (therefore
                      a GCA) or a token standard (e.g. ERC20 and therefore a PT)',
                    type: string}
                  codebase: {description: 'Source code from original protocol (if
                      applicable). Specify whether a given GCA has been "FORKED" from
                      a previous project. ' , type: string}
                  consensusModel: {description: 'Economic measure by which the protocol
                      executes and validates the outcome of a transaction on the network
                      by all involved members. Specify the assets (generally only
                      applicable to GCAs) consensus algorithm (e.g. PoW, PoS, DPoS,
                      etc.)' , type: string}
                  consensusModelGroup: {description: 'This groups the individual consensus
                      models into a broader category. Ie Proof-of-Work-Time would
                      be selected into the "Proof-of-Work" group.' , type: string}
                  contractAddress: {description: 'Address of the account holding object
                      on a specific blockchain.' , type: string}
                  creatorAddress: {description: 'Protocol address of the creating/issuing
                      entity of a token/contract' , type: string}
                  creatorTransactionHash: {description: 'Transaction hash of the token/contract
                      creation' , type: string}
                  difficulty: {description: 'Measure of how difficult it is to find
                      the hash of a blocks header below a given target' , type: string}
                  difficultyAlgorithm: {description: 'Algorithm used to define the
                      networks difficulty target' , type: string}
                  difficultyCycle: {description: 'Number of blocks between difficulty
                    adjustment' , type: string}
                  distributions:
                    description: Mining or minting compatibility of how the
                      network is secured.
                    items: {type: object, 
                      properties: {
                        id: {
                          description: 'ID for the distribution method',
                          format: uuid,
                          type: string
                        },
                        process: {
                          description: 'The process used to distribute the asset',
                          type: string
                        },
                        processType: {
                          description: 'The type of process used to distribute the asset',
                          type: string
                        }
                      }
                    }
                    type: array
                  economicpropertiesCapitalAsset: {description: 'Describes if the
                      asset provides an ongoing source of value and can be priced
                      on the basis of the net present value of its expected returns.
                      Answers the question: Does the asset provide a periodic source
                      of value/income (e.g. from network fees, revenue stream, profit
                      sharing, dividend payout) whether by token burning, buyback,
                      or token distribution (airdrop)?' , type: string}
                  economicpropertiesCommodity: {description: 'Describe if the asset
                      can be used as a primary input to build other products, services,
                      platforms, applications.  Answers the question: Can the asset
                      be used as a building block for other platforms/applications?',
                    type: boolean}
                  economicpropertiesSov: {description: 'Describe if the asset has
                      value and can successfully store it over the long term. Answers
                      the question: Does the asset represent a viable form of long
                      term store of value?' , type: boolean}
                  ethBlockHeightOnCreationDate: {description: 'The latest block height
                      of the Ethereum chain when the asset was created.' , type: string}
                  explorer: {description: 'An explorer url to the associated address.',
                    format: uri , type: string}
                  facebookUrl: {description: 'URL of projects official Facebook page',
                    format: uri , type: string}
                  forumUrl: {description: 'URL of projects official Forum page', format: uri,
                    type: string}
                  freeFloatMarketCapitalization: {description: 'Free Float Market Capitalization
                      is used to determine the relative size of a Cryptoasset. This
                      is calculated by multiplying the price by the Free Float Supply.',
                    type: number}
                  genesisDateUtc: {description: 'First block creation time (UTC) or
                      the token generation date.', format: date-time' , type: string}
                  googleplusUrl: {description: 'URL of projects official Googleplus
                      page', format: uri , type: string}
                  governingBody: {description: 'Name and link to website of team,
                      institution or system in charge of protocol development, maintenance
                      and implementation decisions.' , type: string}
                  hashingAlgorithms:
                    description: The collection of hashing algorithm related
                      information for this asset
                    items: {
                      type: object, 
                      properties: {
                        hashingAlgorithm: {description: 'Secure
                          hashing algorithm used by the protocol' , type: string},
                        hashingAlgorithmGroup: {description: 'A
                          top level group where individual hashing algorithms have
                          been categorized. Eg SHA-256, SHA-512 and SHA-512d have
                          been group into the "SHA Family"' , type: string}
                      }
                    }
                    type: array
                  hashrate: {description: 'The daily amount of hashes it takes to
                      compute an operation, measured as number of Giga hashes per
                      second (billions of hashes per second) the protocols network
                      is performing. Only applicable to General Cryptographic Assets.',
                    type: string}
                  homeUrl: {description: 'Official asset’s URL.', format: uri , type: string}
                  instagramUrl: {description: 'URL of projects official Instagram page',
                    format: uri , type: string}
                  interimToken: {description: 'Describes if the Cryptoasset which is
                      currently a Protocol Token is meant to evolve into his own blockchain
                      in further roadmap stages.' , type: string}
                  linkedinUrl: {description: 'URL of projects official Linkedin page',
                    format: uri , type: string}
                  masternodeCollateral: {description: 'The amount of that asset that
                      is required to become a masternode.', format: uuid' , type: string}
                  masternodeSupport: {description: 'Protocol’s support for Masternodes,
                      i.e. computers that run a full protocol’s client to validate
                      transactions and provide network functionality.' , type: boolean}
                  maxSupply: {description: 'The maximum supply of the asset that could
                      possibly be in circulation' , type: string}
                  maximumStakeAge: {description: 'Number of days required to achieve
                      the greatest probability of signing the next block.' , type: string}
                  minimumStakeAgeDays: {description: 'Number of days required to achieve
                      a reasonable probability of signing the next block.' , type: string}
                  minimumStakeQuantity: {description: 'The minimum amount of the asset
                      that needs to be held to earn interest from staking.' , type: string}
                  minimumTransactionFee: {description: 'The minimum fee to pay in order
                      to complete a transaction on the assets blockchain.' , type: string}
                  name: {description: 'Official name of the cryptographic asset.' , type: string}
                  nicheMarket: {description: 'The General Taxonomy niche market is
                      the most granular level of BNCs 3 Tiered propriety industry
                      classification system. This define the industry that a Cryptoasset
                      will impact.' , type: string}
                  parentChain: {description: 'Underlying protocol used to issue a Protocol
                      Token. This metric only applies to Protocol Tokens. Specify
                      the underlying protocol where this token has been issued.' , type: string}
                  pinterestUrl: {description: 'URL of projects official Pinterest page',
                    format: uri , type: string}
                  premine: {description: 'Number of tokens allocated previous to public
                      circulation and have been premined in the genesis block.' , type: string}
                  redditUrl: {description: 'URL of projects official Reddit page', format: uri,
                    type: string}
                  reserved: {description: 'Number of tokens allocated previous to public
                      circulation and or reserved in a vesting period which cant be
                      spent.' , type: string}
                  scriptingLanguages:
                    description: System to perform computations and validate trace
                      data.
                    items: {type: string}
                    type: array
                  sector: {description: 'The General Taxonomy sector is the first level
                      of BNCs 3 Tiered propriety industry classification system. This
                      defines the industry that a Crypoasset will impact.' , type: string}
                  slackUrl: {description: 'URL of projects official Slack page', format: uri,
                    type: string}
                  smartContractSupport: {description: 'Current support for Turing-Complete,
                      or computationally equivalent, applications with a state stored
                      in the distributed ledger, facilitating, verifying, or enforcing
                      the negotiation or performance of a contract.' , type: boolean}
                  sourceCode: {description: 'The main repository for a projects codebase',
                    format: uri , type: string}
                  sourceCodeChildRepo: {description: 'The most active source code repository
                      for a given project', format: uri , type: string}
                  subClassification: {description: 'The Asset Classification can be
                      further divided into a range of sub classifications' , type: string}
                  subSector: {description: 'The General Taxonomy sub-sector is the
                      second level of BNCs 3 Tiered propriety industry classification
                      system. This define the industry that a Cryptoasset will impact.',
                    type: string}
                  symbol: {description: 'Alphanumerical asset code.' , type: string}
                  telegramUrl: {description: 'URL of projects official Telegram page',
                    format: uri , type: string}
                  tokenStandard: {description: 'Common set of rules for Protocol Tokens
                      issued under a specific protocol. "Token standard field is only
                      applicable for Protocol Tokens, i.e. tokens issued on an underlying
                      blockchain.  N/A  is assigned when a token is native to underlying
                      protocol; and ""NO INFO"" when the protocol token has no issue
                      standard"' , type: string}
                  totalMarketCapitalization: {description: 'Total Market Capitalization
                      is used to determine the relative size of a Cryptoasset. This
                      is calculated by multiplying the price by the Total Supply.',
                    type: number}
                  transactionIdentity: {description: 'Degree of transparency and traceability
                      of transactions in the protocols network. A value of "Anonymous"
                      is assigned if transactions cannot be traced nor identified
                      by anyone, "Pseudonymous" when transactions and users can be
                      identified only by specialized analysis, "Private" when transactions
                      and users identities are only known to the organization running
                      the protocol, "Transparent" when transactions and users identities
                      are public, and "Selective Transparency" when is possible to
                      optionally send transactions anonymously or transparently.',
                    type: string}
                  twitterUrl: {description: 'URL of projects official Twitter page',
                    format: uri , type: string}
                  whitepaper: {description: 'Link to stable URL of the assets whitepaper',
                    format: uri , type: string}
                  youtubeUrl: {description: 'URL of projects official Youtube page',
                    format: uri , type: string}
                title: TaxonomyAssetResponse
                type: object
      security:
      - auth: ['read:taxonomy-asset']
    parameters:
    - {$ref: '#/components/parameters/idParam'}
  /taxonomy/social:
    get:
      operationId: getTaxonomySocials
      tags:
        - Taxonomy
      summary: Get all the social data for the current day available for all assets.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  content:
                    items:
                      properties:
                        assetId: {description: 'Unique ID used to identify asset.', format: uuid,
                          type: string}
                        github:
                          type: object
                          properties:
                            branchCount: {description: 'Total number of branches in the
                                repository' , type: number}
                            closedIssues: {description: 'Total Closed issues on the most
                                active codebase' , type: number}
                            cumulativeTotalCommits: {description: 'Cumulative total commits
                                on the most active codebase' , type: number}
                            forkCount: {description: 'Total number of Forks on the most
                                active codebase' , type: number}
                            mergedPullRequests: {description: 'Daily merged Pull Requests
                                on the most active codebase' , type: number}
                            numContributors: {description: 'Total number of Contributors
                                on the most active codebase' , type: number}
                            openIssues: {description: 'Daily open issues on the most active
                                codebase' , type: number}
                            releaseDescription: {description: 'The description of the
                                latest codebase release' , type: string}
                            releaseName: {description: 'The name of the latest codebase
                                release' , type: string}
                            releaseTag: {description: 'The tag version of the latest codebase
                                release' , type: string}
                            releaseUrl: {description: 'The url of the latest codebase
                                release' , type: string}
                            repoDescription: {description: 'A description of the repository',
                              type: string}
                            stargazers: {description: 'Total number of Stargazers on the
                                most active codebase' , type: number}
                            totalIssues: {description: 'Cumulative total issues on the
                                most active codebase' , type: number}
                            ts: {description: 'The timestamp for when the github metric
                                record was recorded', format: date-time' , type: string}
                            watchers: {description: 'Total number of Watchers on the most
                                active codebase' , type: number}
                            weekAdditions: {description: 'The total amount of lines added
                                that week ' , type: number}
                            weekDeletions: {description: 'The total amount of lines deleted
                                that week ' , type: number}
                        reddit:
                          type: object
                          properties:
                            accountsActive: {description: 'The daily sum of active subreddit
                              accounts with the possibility of numbers rounding or hidden
                              if the account has been set to fuzzed.' , type: number}
                            accountsActiveIsFuzzed: {description: 'This true or false
                              boolean flag will display whether a given subreddit has the
                              active acount number in the UI of the webpage fuzzed, meaning,
                              where they make the count on the UI look different if a subreddit
                              owner doesn’t want to display the real number, or it shows a
                              rounded up version something like 2000+ active users instead
                              of a number like 2146.' , type: boolean}
                            activeUserCount: {description: 'The daily sum of active subreddit
                              accounts' , type: number}
                            numPosts: {description: 'The number of daily posts' , type: number}
                            redditUrl: {description: 'URL of projects official Reddit
                              page' , type: string}
                            subscribers: {description: 'The number of daily subscribers',
                              type: number}
                            ts: {description: 'The timestamp for when the reddit metric
                              record was recorded', format: date-time' , type: string}
                        twitter:
                          type: object
                          properties:
                            followers: {description: 'The number of daily twitter followers',
                              type: number}
                            likes: {description: 'The number of daily twitter likes',
                              type: number}
                            numFollowing: {description: 'The amount of followers for
                              an account on a given day' , type: number}
                            numTimesListed: {description: 'This is the number of times
                              an account has been added to a Twitter list created by another
                              user on Twitter' , type: number}
                            screenName: {description: 'The twitter handle for a given
                              project' , type: string}
                            ts: {description: 'The timestamp for when the twitter metric
                              record was recorded', format: date-time' , type: string}
                            tweets: {description: 'The number of daily tweets published
                              by the account' , type: number}
                      type: object                   
                    type: array
                title: TaxonomySocialResponse
                type: object
      security:
      - auth: ['read:taxonomy-social']
  '/taxonomy/social/{id}':
    get:
      operationId: getTaxonomySocial
      tags:
        - Taxonomy
      summary: Get all the social data for the current day for specific assets.
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  assetId: {description: 'Unique ID used to identify asset.', format: uuid,
                    type: string}
                  github:
                    type: object
                    properties:
                      branchCount: {description: 'Total number of branches in the
                          repository' , type: number}
                      closedIssues: {description: 'Total Closed issues on the most
                          active codebase' , type: number}
                      cumulativeTotalCommits: {description: 'Cumulative total commits
                          on the most active codebase' , type: number}
                      forkCount: {description: 'Total number of Forks on the most
                          active codebase' , type: number}
                      mergedPullRequests: {description: 'Daily merged Pull Requests
                          on the most active codebase' , type: number}
                      numContributors: {description: 'Total number of Contributors
                          on the most active codebase' , type: number}
                      openIssues: {description: 'Daily open issues on the most active
                          codebase' , type: number}
                      releaseDescription: {description: 'The description of the
                          latest codebase release' , type: string}
                      releaseName: {description: 'The name of the latest codebase
                          release' , type: string}
                      releaseTag: {description: 'The tag version of the latest codebase
                          release' , type: string}
                      releaseUrl: {description: 'The url of the latest codebase
                          release' , type: string}
                      repoDescription: {description: 'A description of the repository',
                        type: string}
                      stargazers: {description: 'Total number of Stargazers on the
                          most active codebase' , type: number}
                      totalIssues: {description: 'Cumulative total issues on the
                          most active codebase' , type: number}
                      ts: {description: 'The timestamp for when the github metric
                          record was recorded', format: date-time' , type: string}
                      watchers: {description: 'Total number of Watchers on the most
                          active codebase' , type: number}
                      weekAdditions: {description: 'The total amount of lines added
                          that week ' , type: number}
                      weekDeletions: {description: 'The total amount of lines deleted
                          that week ' , type: number}
                  reddit:
                    type: object
                    properties:
                      accountsActive: {description: 'The daily sum of active subreddit
                        accounts with the possibility of numbers rounding or hidden
                        if the account has been set to fuzzed.' , type: number}
                      accountsActiveIsFuzzed: {description: 'This true or false
                        boolean flag will display whether a given subreddit has the
                        active acount number in the UI of the webpage fuzzed, meaning,
                        where they make the count on the UI look different if a subreddit
                        owner doesn’t want to display the real number, or it shows a
                        rounded up version something like 2000+ active users instead
                        of a number like 2146.' , type: boolean}
                      activeUserCount: {description: 'The daily sum of active subreddit
                        accounts' , type: number}
                      numPosts: {description: 'The number of daily posts' , type: number}
                      redditUrl: {description: 'URL of projects official Reddit
                        page' , type: string}
                      subscribers: {description: 'The number of daily subscribers',
                        type: number}
                      ts: {description: 'The timestamp for when the reddit metric
                        record was recorded', format: date-time' , type: string}
                  twitter:
                    type: object
                    properties:
                      followers: {description: 'The number of daily twitter followers',
                        type: number}
                      likes: {description: 'The number of daily twitter likes',
                        type: number}
                      numFollowing: {description: 'The amount of followers for
                        an account on a given day' , type: number}
                      numTimesListed: {description: 'This is the number of times
                        an account has been added to a Twitter list created by another
                        user on Twitter' , type: number}
                      screenName: {description: 'The twitter handle for a given
                        project' , type: string}
                      ts: {description: 'The timestamp for when the twitter metric
                        record was recorded', format: date-time' , type: string}
                      tweets: {description: 'The number of daily tweets published
                        by the account' , type: number}
                title: TaxonomySocialResponse
                type: object
      security:
      - auth: ['read:taxonomy-social']
    parameters:
    - {$ref: '#/components/parameters/idParam'}
  /taxonomy/filter:
    get:
      tags:
        - Taxonomy
      summary: Get all the taxonomy fields that are useful for filtering for all the assets
      operationId: getTaxonomyFilters
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  content:
                    items:
                      properties:
                        assetId: {description: 'Unique ID used to identify asset.',
                          format: uuid' , type: string}
                        classification: {description: 'The General Taxonomy divides
                            the superclass of Cryptographic Assets into two broad
                            families. General Cryptographic Assets and Protocol Tokens.
                            General Cryptographic Assets represent programmable value
                            that can be used by anyone, in any sector of industry
                            and society, as  a capital, transformable/consumable,
                            or a store of value asset. These assets also serve as
                            the foundation where Protocol Tokens are created, issued
                            and operated. Protocol Tokens represent a claim to a capital,
                            transformable/consumable, or a store of value asset. However,
                            since they can only capture a specific market segment
                            this effectively limits their use as store of value. Define
                            whether a token is either "General Cryptographic Asset"
                            or "Protocol Token." GCAs have an underlying CONSENSUS  ALGORITHM
                            (e.g. PoW, PoS, DPoS, etc) while PTs are issued on top
                            of a GCA. These sources will detail wether the asset has
                            an underlying consensus algorithm/protocol (therefore
                            a GCA) or a token standard (e.g. ERC20 and therefore a
                            PT)' , type: string}
                        consensusModelGroup: {description: 'This groups the individual
                            consensus models into a broader category. Ie Proof-of-Work-Time
                            would be selected into the "Proof-of-Work" group.' , type: string}
                        parentChain: {description: 'Underlying protocol used to issue
                            a Protocol Token. This metric only applies to Protocol
                            Tokens. Specify the underlying protocol where this token
                            has been issued.' , type: string}
                        transactionIdentity: {description: 'Degree of transparency
                            and traceability of transactions in the protocols network.
                            A value of "Anonymous" is assigned if transactions cannot
                            be traced nor identified by anyone, "Pseudonymous" when
                            transactions and users can be identified only by specialized
                            analysis, "Private" when transactions and users identities
                            are only known to the organization running the protocol,
                            "Transparent" when transactions and users identities are
                            public, and "Selective Transparency" when is possible
                            to optionally send transactions anonymously or transparently.',
                          type: string}
                      type: object
                    type: array
                title: TaxonomyFilterResponse
                type: object
      security:
      - auth: ['read:taxonomy-filters']
  '/taxonomy/filter/{id}':
    get:
      tags:
        - Taxonomy
      summary: Get all the taxonomy fields that are useful for filtering for specific assets
      operationId: getTaxonomyFilter
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                    assetId: {description: 'Unique ID used to identify asset.',
                      format: uuid' , type: string}
                    classification: {description: 'The General Taxonomy divides
                        the superclass of Cryptographic Assets into two broad
                        families. General Cryptographic Assets and Protocol Tokens.
                        General Cryptographic Assets represent programmable value
                        that can be used by anyone, in any sector of industry
                        and society, as  a capital, transformable/consumable,
                        or a store of value asset. These assets also serve as
                        the foundation where Protocol Tokens are created, issued
                        and operated. Protocol Tokens represent a claim to a capital,
                        transformable/consumable, or a store of value asset. However,
                        since they can only capture a specific market segment
                        this effectively limits their use as store of value. Define
                        whether a token is either "General Cryptographic Asset"
                        or "Protocol Token." GCAs have an underlying CONSENSUS  ALGORITHM
                        (e.g. PoW, PoS, DPoS, etc) while PTs are issued on top
                        of a GCA. These sources will detail wether the asset has
                        an underlying consensus algorithm/protocol (therefore
                        a GCA) or a token standard (e.g. ERC20 and therefore a
                        PT)' , type: string}
                    consensusModelGroup: {description: 'This groups the individual
                        consensus models into a broader category. Ie Proof-of-Work-Time
                        would be selected into the "Proof-of-Work" group.' , type: string}
                    parentChain: {description: 'Underlying protocol used to issue
                        a Protocol Token. This metric only applies to Protocol
                        Tokens. Specify the underlying protocol where this token
                        has been issued.' , type: string}
                    transactionIdentity: {description: 'Degree of transparency
                        and traceability of transactions in the protocols network.
                        A value of "Anonymous" is assigned if transactions cannot
                        be traced nor identified by anyone, "Pseudonymous" when
                        transactions and users can be identified only by specialized
                        analysis, "Private" when transactions and users identities
                        are only known to the organization running the protocol,
                        "Transparent" when transactions and users identities are
                        public, and "Selective Transparency" when is possible
                        to optionally send transactions anonymously or transparently.',
                      type: string}
                title: TaxonomyFilterResponse
                type: object
      security:
      - auth: ['read:taxonomy-filters']
